// Code generated by protoc-gen-go. DO NOT EDIT.
// source: alpacalabs/confirmation/v1/api.proto

package v1

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("alpacalabs/confirmation/v1/api.proto", fileDescriptor_11f033f3a571f82c)
}

var fileDescriptor_11f033f3a571f82c = []byte{
	// 262 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x49, 0xcc, 0x29, 0x48,
	0x4c, 0x4e, 0xcc, 0x49, 0x4c, 0x2a, 0xd6, 0x4f, 0xce, 0xcf, 0x4b, 0xcb, 0x2c, 0xca, 0x4d, 0x2c,
	0xc9, 0xcc, 0xcf, 0xd3, 0x2f, 0x33, 0xd4, 0x4f, 0x2c, 0xc8, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9,
	0x17, 0x92, 0x42, 0xa8, 0xd2, 0x43, 0x56, 0xa5, 0x57, 0x66, 0x28, 0xa5, 0x83, 0xdf, 0x84, 0x78,
	0xa8, 0x18, 0xc4, 0x24, 0xa3, 0x15, 0x4c, 0x5c, 0xc2, 0xce, 0x48, 0xaa, 0x82, 0x53, 0x8b, 0xca,
	0x32, 0x93, 0x53, 0x85, 0x3a, 0x18, 0xe1, 0xe2, 0xae, 0xb9, 0x89, 0x99, 0x39, 0x8e, 0x29, 0x29,
	0x45, 0xa9, 0xc5, 0xc5, 0x42, 0x66, 0x7a, 0xb8, 0xad, 0xd6, 0xc3, 0xa2, 0x21, 0x28, 0xb5, 0xb0,
	0x34, 0xb5, 0xb8, 0x44, 0xca, 0x9c, 0x64, 0x7d, 0xc5, 0x05, 0xf9, 0x79, 0xc5, 0xa9, 0x4a, 0x0c,
	0x42, 0xad, 0x8c, 0x5c, 0x42, 0x50, 0x15, 0x01, 0x19, 0xf9, 0x79, 0xa9, 0x7e, 0xa5, 0xb9, 0x49,
	0xa9, 0x45, 0x42, 0xa6, 0x44, 0x98, 0x88, 0xa4, 0x1e, 0xe6, 0x10, 0x33, 0x52, 0xb5, 0xc1, 0xdc,
	0xe1, 0x74, 0x90, 0x91, 0x4b, 0x2e, 0x39, 0x3f, 0x17, 0x8f, 0x7e, 0x27, 0x41, 0xe4, 0xa0, 0x0c,
	0x00, 0x05, 0x70, 0x00, 0x63, 0x94, 0x57, 0x7a, 0x66, 0x49, 0x46, 0x69, 0x92, 0x5e, 0x72, 0x7e,
	0xae, 0xbe, 0x23, 0x58, 0xaf, 0x0f, 0x28, 0x6e, 0xc0, 0xe1, 0x5f, 0x94, 0x5a, 0x90, 0xaf, 0x8b,
	0x6c, 0x8a, 0x6e, 0x7a, 0xbe, 0x3e, 0xee, 0x08, 0x5c, 0xc4, 0xc4, 0xec, 0xe8, 0xe3, 0xbc, 0x8a,
	0x49, 0x0a, 0x61, 0x8e, 0x1e, 0xb2, 0x95, 0x7a, 0x61, 0x86, 0xa7, 0x90, 0x25, 0x63, 0x90, 0x25,
	0x63, 0xc2, 0x0c, 0x93, 0xd8, 0xc0, 0xb6, 0x1a, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0xfe, 0x9d,
	0x26, 0x00, 0x67, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ConfirmationServiceClient is the client API for ConfirmationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ConfirmationServiceClient interface {
	ConfirmEmailAddress(ctx context.Context, in *ConfirmEmailAddressRequest, opts ...grpc.CallOption) (*ConfirmEmailAddressResponse, error)
	ConfirmPhoneNumber(ctx context.Context, in *ConfirmPhoneNumberRequest, opts ...grpc.CallOption) (*ConfirmPhoneNumberResponse, error)
}

type confirmationServiceClient struct {
	cc *grpc.ClientConn
}

func NewConfirmationServiceClient(cc *grpc.ClientConn) ConfirmationServiceClient {
	return &confirmationServiceClient{cc}
}

func (c *confirmationServiceClient) ConfirmEmailAddress(ctx context.Context, in *ConfirmEmailAddressRequest, opts ...grpc.CallOption) (*ConfirmEmailAddressResponse, error) {
	out := new(ConfirmEmailAddressResponse)
	err := c.cc.Invoke(ctx, "/alpacalabs.confirmation.v1.ConfirmationService/ConfirmEmailAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *confirmationServiceClient) ConfirmPhoneNumber(ctx context.Context, in *ConfirmPhoneNumberRequest, opts ...grpc.CallOption) (*ConfirmPhoneNumberResponse, error) {
	out := new(ConfirmPhoneNumberResponse)
	err := c.cc.Invoke(ctx, "/alpacalabs.confirmation.v1.ConfirmationService/ConfirmPhoneNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConfirmationServiceServer is the server API for ConfirmationService service.
type ConfirmationServiceServer interface {
	ConfirmEmailAddress(context.Context, *ConfirmEmailAddressRequest) (*ConfirmEmailAddressResponse, error)
	ConfirmPhoneNumber(context.Context, *ConfirmPhoneNumberRequest) (*ConfirmPhoneNumberResponse, error)
}

func RegisterConfirmationServiceServer(s *grpc.Server, srv ConfirmationServiceServer) {
	s.RegisterService(&_ConfirmationService_serviceDesc, srv)
}

func _ConfirmationService_ConfirmEmailAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmEmailAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfirmationServiceServer).ConfirmEmailAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alpacalabs.confirmation.v1.ConfirmationService/ConfirmEmailAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfirmationServiceServer).ConfirmEmailAddress(ctx, req.(*ConfirmEmailAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfirmationService_ConfirmPhoneNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmPhoneNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfirmationServiceServer).ConfirmPhoneNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alpacalabs.confirmation.v1.ConfirmationService/ConfirmPhoneNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfirmationServiceServer).ConfirmPhoneNumber(ctx, req.(*ConfirmPhoneNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ConfirmationService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "alpacalabs.confirmation.v1.ConfirmationService",
	HandlerType: (*ConfirmationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConfirmEmailAddress",
			Handler:    _ConfirmationService_ConfirmEmailAddress_Handler,
		},
		{
			MethodName: "ConfirmPhoneNumber",
			Handler:    _ConfirmationService_ConfirmPhoneNumber_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "alpacalabs/confirmation/v1/api.proto",
}
